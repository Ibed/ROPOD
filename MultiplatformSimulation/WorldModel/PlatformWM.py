from WorldModel import Area as ar

class PlatformWM(object):

    def __init__(self,platformLabel):
        """init"""
        """graph to model the world, information about areas gets updated by perception"""
        self.areaList = []
        self.areaGraph = {}
        self.currentArea = None
        self.targetArea = None
        self.path = {}

        """events generated by monitors"""
        self.listOfMonitors = []
        self.eventStack = []

        """other information"""
        self.areasLabelsToBeMonitored = []
        self.label = platformLabel
        self.listOfUnits = []
        self.currentConfiguration = 1
        self.configurationDic = {1:'free mode',
                                 2:'retracted mode',
                                 3:'cart mode'}

    def createArea(self, xDim, yDim, level, label):
        area = ar.Area(xDim, yDim, level, label)
        self.areaList.append(area)
        self.areaGraph[label] = []

    def linkAreas(self, label1, label2):
        isValid1 = False
        isValid2 = False
        for area in self.areaList:
            """check if labels are part of areaList"""
            if area.label == label1:
                isValid1 = True
            if area.label == label2:
                isValid2 = True
            """link labels in areaGraph"""
            if (isValid1 and isValid2):
                self.areaGraph[label1].append(label2)
                self.areaGraph[label2].append(label1)


    def containArea(self, motherLabel, daughterLabel, posRelToMother):
        self.areaGraph[motherLabel].append(daughterLabel)
        for area in self.areaList:
            if area.label == daughterLabel:
                daughterArea = area
            if area.label == motherLabel:
                motherArea = area
        daughterArea.posRelToMother = posRelToMother
        daughterArea.posRelToTopNode = posRelToMother
        daughterArea.motherNode.append(motherArea)
        motherArea.daughterNodes.append(daughterArea)

        """iterative function to update the daughter node position relative to the top node"""
        motherArea.updateDaughterNodes()

    def updateAreasToBeMonitored(self,areaLabelsToBeMonitoredList):
        self.areasLabelsToBeMonitored = areaLabelsToBeMonitoredList

    def setStartingArea(self,areaLabel):
        self.currentArea = self.returnArea(areaLabel)

    def returnArea(self,label):
        for area in self.areaList:
            if label == area.label:
                return area

    def isPartOfPlatform(self,unit):
        ownUnit = False
        for platformUnit in self.listOfUnits:
            if unit == platformUnit:
                ownUnit = True
        return ownUnit